policy_module(gravity, 6.0.0)

gen_require(`
  attribute container_domain;
  attribute container_runtime_domain;
  type setfiles_t;
  type container_t;
  type container_file_t;
  type container_log_t;
  type container_share_t;
  type container_var_run_t;
  type container_runtime_tmpfs_t;
  type spc_t;
  type var_t;
  type var_lib_t;
  type var_log_t;
')

####################################
#
# Declarations
#

attribute_role gravity_roles;
attribute_role gravity_container_roles;

# attribute to share between gravity domains (cluster vs installer)
attribute gravity_domain;
role gravity_roles types gravity_domain;
# attribute for processes runing inside the planet container
attribute gravity_container_domain;
# attribute for all gravity binaries
attribute gravity_executable_domain;

# gravity domains
gravity_domain_template(gravity)
gravity_domain_template(gravity_installer)

# state directory
type gravity_home_t;
files_type(gravity_home_t)

# log files
type gravity_log_t;
logging_log_file(gravity_log_t)

# temporary files/directories
type gravity_tmp_t;
files_tmp_file(gravity_tmp_t)

# socket files
type gravity_var_run_t;
files_pid_file(gravity_var_run_t)

# systemd unit files (services)
type gravity_unit_file_t;
systemd_unit_file(gravity_unit_file_t)

# network ports
attribute gravity_port_type;
type gravity_port_t, gravity_port_type;
type gravity_install_port_t, gravity_port_type;
type gravity_vxlan_port_t, gravity_port_type;
type gravity_docker_port_t, gravity_port_type;
type gravity_kubernetes_port_t, gravity_port_type;
corenet_port(gravity_port_t)
corenet_port(gravity_install_port_t)
corenet_port(gravity_vxlan_port_t)
corenet_port(gravity_docker_port_t)
corenet_port(gravity_kubernetes_port_t)

#####################################
#
# Planet
#

container_runtime_domain_template(gravity_container_runtime)
type gravity_container_runtime_exec_t, gravity_executable_domain;
init_daemon_domain(gravity_container_runtime_t, gravity_container_runtime_exec_t)
can_exec(gravity_container_runtime_t, gravity_container_runtime_exec_t)
can_exec(gravity_container_runtime_t, gravity_container_file_t)
can_exec(gravity_container_runtime_t, gravity_service_exec_t)
can_exec(gravity_container_runtime_t, gravity_container_init_exec_t)
can_exec(gravity_container_runtime_t, gravity_kubernetes_exec_t)
role gravity_container_roles types gravity_container_runtime_t;

type gravity_container_home_t;
files_type(gravity_container_home_t)
ubac_constrained(gravity_home_t)

type gravity_kubelet_home_t;
files_type(gravity_kubelet_home_t)

# socket files
type gravity_container_var_run_t;
files_pid_file(gravity_container_var_run_t)

# init process
gravity_system_container_domain_template(gravity_container_init)
can_exec(gravity_container_init_t, gravity_container_init_exec_t)

gravity_system_container_domain_template(gravity_container_systemctl)
can_exec(gravity_container_systemctl_t, gravity_container_systemctl_exec_t)

# kubernetes control plane components
gravity_system_container_domain_template(gravity_kubernetes)
can_exec(gravity_kubernetes_t, gravity_kubernetes_exec_t)
can_exec(gravity_kubernetes_t container_runtime_exec_t)

# cluster services
gravity_system_container_domain_template(gravity_service)
can_exec(gravity_service_t, gravity_service_exec_t)
can_exec(gravity_service_t, gravity_container_file_t)

# domain for all not otherwise labeled processes running inside the container
gravity_container_domain_template(gravity_container)
typeattribute gravity_container_t gravity_container_domain;

# domain for system container purposes (i.e. application init container)
gravity_container_domain_template(gravity_container_system)
can_exec(gravity_container_system_t, gravity_exec_t)

# domain for gravity logging component
gravity_container_domain_template(gravity_container_logger)

type gravity_container_logger_home_t;
files_type(gravity_container_logger_home_t)

type gravity_container_file_t;
files_mountpoint(gravity_container_file_t)
files_associate_rootfs(gravity_container_file_t)
domain_entry_file(gravity_container_t, gravity_container_file_t)

role gravity_roles types gravity_container_runtime_t;

####################################
#
# Local policy
#

can_exec(gravity_domain, gravity_exec_t)
can_exec(gravity_domain, gravity_installer_exec_t)
can_exec(gravity_domain, gravity_container_file_t)

admin_pattern(gravity_domain, gravity_home_t)
admin_pattern(gravity_domain, gravity_container_logger_home_t)
admin_pattern(gravity_domain, gravity_tmp_t)
admin_pattern(gravity_domain, gravity_container_home_t)
admin_pattern(gravity_domain, gravity_kubelet_home_t)
admin_pattern(gravity_domain, gravity_container_file_t)
manage_files_pattern(gravity_domain, gravity_log_t, gravity_log_t)
manage_chr_files_pattern(gravity_domain, gravity_container_home_t, gravity_container_home_t)
manage_blk_files_pattern(gravity_domain, gravity_container_home_t, gravity_container_home_t)
manage_chr_files_pattern(gravity_domain, gravity_container_file_t, gravity_container_file_t)
manage_blk_files_pattern(gravity_domain, gravity_container_file_t, gravity_container_file_t)

admin_pattern(gravity_container_logger_t, gravity_container_logger_home_t)
gravity_read_state_files(gravity_container_logger_t)
gravity_container_read_state_files(gravity_container_logger_t)
gravity_manage_state_files(gravity_container_system_t)
gravity_manage_state_dirs(gravity_container_system_t)
domtrans_pattern(gravity_container_system_t, gravity_kubernetes_exec_t, gravity_kubernetes_t)
container_read_lib_files(gravity_container_logger_t)

corecmd_exec_bin(gravity_domain)
corecmd_bin_entry_type(gravity_domain)
corecmd_exec_shell(gravity_domain)
corecmd_shell_entry_type(gravity_domain)
mount_domtrans(gravity_domain)
seutil_domtrans_setfiles(gravity_domain)
seutil_domtrans_semanage(gravity_domain)
container_runtime_domtrans(gravity_domain)

# planet process running as gravity_t
# TODO: transition properly to gravity_container_runtime_t
allow gravity_domain gravity_container_domain:key { create view setattr };
allow gravity_domain self:fifo_file rw_fifo_file_perms;
allow gravity_domain self:process { setrlimit setpgid ptrace setsched setkeycreate setexec transition };
allow gravity_domain self:tcp_socket create_socket_perms;
allow gravity_domain self:tcp_socket create_stream_socket_perms;
allow gravity_domain self:unix_dgram_socket { connect create getattr setopt };

allow gravity_domain gravity_container_init_exec_t:lnk_file { manage_lnk_file_perms };
allow gravity_domain gravity_container_init_exec_t:file { manage_file_perms };
allow gravity_domain gravity_container_runtime_exec_t:lnk_file { manage_lnk_file_perms };
allow gravity_domain gravity_container_runtime_exec_t:file { manage_file_perms };
allow gravity_domain gravity_container_t:lnk_file { manage_lnk_file_perms };
allow gravity_domain gravity_container_t:file { manage_file_perms };
allow gravity_domain gravity_service_exec_t:lnk_file { manage_lnk_file_perms };
allow gravity_domain gravity_service_exec_t:file { manage_file_perms };
allow gravity_domain gravity_kubernetes_exec_t:lnk_file { manage_lnk_file_perms };
allow gravity_domain gravity_kubernetes_exec_t:file { manage_file_perms };

# lsblk access /sys/dev/block
dev_read_sysfs(gravity_domain)

# TODO: enable when the list of directories is settled
#files_dontaudit_search_all_dirs(gravity_domain)

# allow to statfs the state directory
fs_getattr_xattr_fs(gravity_domain)
# read/write to $TMPDIR
#files_manage_generic_tmp_files(gravity_domain)
files_poly_member_tmp(gravity_domain, gravity_tmp_t)
domain_use_interactive_fds(gravity_domain)

sysnet_dns_name_resolve(gravity_domain)
gravity_container_stream_connect(gravity_domain)

container_manage_lib_files(gravity_domain)
container_manage_lib_dirs(gravity_domain)
container_manage_share_files(gravity_domain)
container_manage_share_dirs(gravity_domain)
container_manage_log_files(gravity_domain)
container_manage_files(gravity_domain)
container_manage_dirs(gravity_domain)
fs_getattr_all_fs(gravity_domain)
fs_mount_all_fs(gravity_domain)
fs_unmount_all_fs(gravity_domain)
fs_remount_all_fs(gravity_domain)

files_tmp_filetrans(gravity_domain, gravity_tmp_t, { file dir lnk_file sock_file })

# installer directory transitions
userdom_user_home_content_filetrans(gravity_domain, gravity_home_t, dir, ".gravity")
userdom_user_home_content_filetrans(gravity_domain, gravity_home_t, file)
userdom_user_home_content_filetrans(gravity_domain, gravity_exec_t, file, "gravity")
userdom_user_home_content_filetrans(gravity_domain, gravity_log_t, file, "gravity-system.log")
userdom_user_home_content_filetrans(gravity_domain, gravity_log_t, file, "gravity-install.log")

userdom_user_home_dir_filetrans(gravity_domain, gravity_home_t, dir, ".gravity")
userdom_user_home_dir_filetrans(gravity_domain, gravity_home_t, file)
userdom_user_home_dir_filetrans(gravity_domain, gravity_exec_t, file, "gravity")
userdom_user_home_dir_filetrans(gravity_domain, gravity_log_t, file, "gravity-system.log")
userdom_user_home_dir_filetrans(gravity_domain, gravity_log_t, file, "gravity-install.log")

userdom_admin_home_dir_filetrans(gravity_domain, gravity_home_t, dir, ".gravity")
userdom_admin_home_dir_filetrans(gravity_domain, gravity_home_t, file)
userdom_admin_home_dir_filetrans(gravity_domain, gravity_exec_t, file, "gravity")
userdom_admin_home_dir_filetrans(gravity_domain, gravity_log_t, file, "gravity-system.log")
userdom_admin_home_dir_filetrans(gravity_domain, gravity_log_t, file, "gravity-install.log")

gravity_home_content_filetrans(gravity_domain, gravity_unit_file_t, file, "gravity-installer.service")
gravity_home_content_filetrans(gravity_domain, gravity_unit_file_t, file, "gravity-agent.service")
gravity_home_content_filetrans(gravity_domain, gravity_var_run_t, sock_file, "installer.sock")

files_var_lib_filetrans(gravity_domain, gravity_home_t, dir, "gravity")
logging_log_filetrans(gravity_domain, gravity_log_t, file)
gravity_container_home_content_filetrans(gravity_domain, container_var_lib_t, dir, "registry")
gravity_container_home_content_filetrans(gravity_domain, container_var_lib_t, dir, "docker")
gravity_container_home_content_filetrans(gravity_domain, gravity_container_runtime_exec_t, file, "planet")
gravity_container_home_content_filetrans(gravity_domain, gravity_exec_t, file, "gravity")
systemd_unit_file_filetrans(gravity_domain, gravity_unit_file_t, { file lnk_file })
manage_sock_files_pattern(gravity_domain, gravity_var_run_t, gravity_var_run_t)

manage_files_pattern(gravity_domain, gravity_unit_file_t, gravity_unit_file_t)
manage_lnk_files_pattern(gravity_domain, gravity_unit_file_t, gravity_unit_file_t)
allow gravity_domain gravity_unit_file_t:service { manage_service_perms };
read_files_pattern(gravity_container_domain, gravity_unit_file_t, gravity_unit_file_t)
read_lnk_files_pattern(gravity_container_domain, gravity_unit_file_t, gravity_unit_file_t)
allow gravity_container_domain gravity_unit_file_t:service { manage_service_perms };

# mkdir /var/run/planet/XXX
files_pid_filetrans(gravity_domain, container_var_run_t, dir, "planet")
init_create_pid_dirs(gravity_domain)

files_pid_filetrans(gravity_domain, container_var_run_t, sock_file, "planet.socket")
create_dirs_pattern(gravity_domain, container_var_run_t, container_var_run_t)
delete_dirs_pattern(gravity_domain, container_var_run_t, container_var_run_t)
setattr_dirs_pattern(gravity_domain, container_var_run_t, container_var_run_t)
manage_files_pattern(gravity_domain, container_var_run_t, container_var_run_t)
# /usr/local/share/gravity
filetrans_pattern(gravity_domain, usr_t, gravity_home_t, dir, "gravity")

allow gravity_domain container_var_run_t:sock_file { create unlink };
allow gravity_domain container_var_run_t:fifo_file { create setattr unlink };
allow gravity_domain container_var_run_t:file mounton;

# execute files inside /var/lib/gravity
allow gravity_domain gravity_home_t:file entrypoint;
exec_files_pattern(gravity_domain, gravity_home_t, gravity_home_t)
# execute files inside planet rootfs
allow gravity_domain gravity_container_file_t:file entrypoint;
exec_files_pattern(gravity_domain, gravity_container_file_t, gravity_container_file_t)

systemd_exec_systemctl(gravity_domain)
dontaudit gravity_installer_t self:capability net_admin;
systemd_create_unit_file_lnk(gravity_domain)
init_reload_services(gravity_domain)
init_status(gravity_domain)
systemd_read_unit_files(gravity_domain)
systemd_search_unit_dirs(gravity_domain)
systemd_getattr_unit_dirs(gravity_domain)
systemd_getattr_unit_files(gravity_domain)

# allow bind/rw on kubernetes ports
corenet_tcp_bind_generic_node(gravity_domain)
corenet_udp_bind_generic_node(gravity_domain)
# allow to connect to AWS metadata endpoint
corenet_tcp_connect_http_port(gravity_domain)
allow gravity_domain gravity_port_type:tcp_socket { connect name_connect };
allow gravity_domain gravity_port_type:udp_socket { connect };

optional_policy(`
  corenet_tcp_bind_kubernetes_port(gravity_domain)
  corenet_tcp_connect_kubernetes_port(gravity_domain)
  corenet_tcp_sendrecv_kubernetes_port(gravity_domain)
  # allow bind/connect/recv on port 5000 (bind is used during preflight checks)
  corenet_tcp_bind_commplex_main_port(gravity_domain)
  corenet_tcp_connect_commplex_main_port(gravity_domain)
  corenet_tcp_sendrecv_commplex_main_port(gravity_domain)
  # allow bind/rw on port 7001
  corenet_tcp_bind_afs3_callback_port(gravity_domain)
  corenet_tcp_connect_afs3_callback_port(gravity_domain)
  corenet_tcp_sendrecv_afs3_callback_port(gravity_domain)
')

allow gravity_domain gravity_install_port_t:tcp_socket { listen name_bind };
allow gravity_domain gravity_port_t:tcp_socket { listen name_bind };

# execute ifconfig and access network configuration
sysnet_domtrans_ifconfig(gravity_domain)
iptables_domtrans(gravity_domain)
optional_policy(`
  modutils_domtrans_insmod(gravity_domain)
')
usermanage_domtrans_groupadd(gravity_domain)
usermanage_domtrans_useradd(gravity_domain)
journalctl_domtrans(gravity_domain)
container_runtime_domtrans(gravity_domain)
dmesg_domtrans(gravity_domain)
gravity_container_runtime_domtrans(gravity_domain)
# cannot use a named transition as the binary is created by
# first creating a file with a random name and then renaming it to gravity
allow gravity_domain gravity_exec_t:file { create write rename };
corecmd_bin_filetrans(gravity_domain, gravity_exec_t, file)
corecmd_bin_filetrans(gravity_domain, gravity_kubernetes_exec_t, lnk_file, "kubectl")
corecmd_bin_filetrans(gravity_domain, gravity_kubernetes_exec_t, lnk_file, "helm")

sysnet_read_config(gravity_domain)
files_search_etc(gravity_domain)
files_search_var_lib(gravity_domain)
files_list_var_lib(gravity_domain)
# write access for /etc/modules-load.d/
files_manage_etc_files(gravity_domain)

# read/only access to lib/modules/* (preflight checks)
files_load_kernel_modules(gravity_domain)
files_search_kernel_modules(gravity_domain)
files_read_kernel_modules(gravity_domain)
allow gravity_domain self:rawip_socket { getopt setopt create };
kernel_read_state(gravity_domain)
kernel_read_network_state(gravity_domain)
kernel_read_all_sysctls(gravity_domain)
kernel_read_messages(gravity_t)
kernel_read_messages(gravity_installer_t)

# log to syslog
logging_send_syslog_msg(gravity_t)
logging_send_syslog_msg(gravity_installer_t)

# allow unconfined/staff/sysadm domains to use gravity
optional_policy(`
  gen_require(`
    role unconfined_r;
  ')
  unconfined_run_to(gravity_t, gravity_exec_t)
  unconfined_run_to(gravity_installer_t, gravity_installer_exec_t)
  role_transition unconfined_r gravity_exec_t system_r;
  role_transition unconfined_r gravity_installer_exec_t system_r;
')

optional_policy(`
  gen_require(`
    role sysadm_r;
    type sysadm_t;
  ')
  gravity_run(sysadm_t, sysadm_r)
  gravity_installer_domtrans(sysadm_t)
  role_transition sysadm_r gravity_exec_t system_r;
  role_transition sysadm_r gravity_installer_exec_t system_r;
')

optional_policy(`
  gen_require(`
    role staff_r;
    type staff_t;
  ')
  gravity_run(staff_t, staff_r)
  gravity_installer_domtrans(staff_t)
  role_transition staff_r gravity_exec_t system_r;
  role_transition staff_r gravity_installer_exec_t system_r;
')

allow gravity_domain self:capability { sys_ptrace sys_admin sys_resource chown fowner fsetid setuid setgid setpcap sys_chroot };
# TODO: remove dac_override
# This needs more work as /var/lib/gravity is owned by the service user
# but (some) commands are requiring root
allow gravity_domain self:capability { dac_override dac_read_search };

# mount systemd journals inside rootfs
allow gravity_domain gravity_container_home_t:dir mounton;
allow gravity_domain gravity_home_t:dir mounton;

allow gravity_domain self:netlink_audit_socket create;

# SELinux-related rules
# allow restorecon to relabel /var/lib/gravity
allow setfiles_t gravity_home_t:file read;
selinux_get_enforce_mode(gravity_t)
selinux_get_enforce_mode(gravity_installer_t)
seutil_read_file_contexts(gravity_domain)
seutil_read_default_contexts(gravity_domain)
# bootstrap SELinux configuration when running in gravity domain.
# Should be a no-op but allow to avoid logging denials
seutil_domtrans_loadpolicy(gravity_domain)
# allow gravity to compute security context for executable
# unfortunately `selinuxexeccon` is not labeled for the type of access it performs
selinux_compute_create_context(gravity_installer_t)
allow gravity_domain self:process setfscreate;
# allow create/delete of /etc/modules-load.d/gravity.conf
files_manage_etc_runtime_files(gravity_domain)
files_etc_filetrans_etc_runtime(gravity_domain, file)

#############################
#
# gravity installer
#
# switch the role to system_r when restarting
domain_role_change_exemption(gravity_installer_t)
domain_system_change_exemption(gravity_installer_t)
userdom_read_admin_home_files(gravity_installer_t)
userdom_read_user_home_content_files(gravity_installer_t)
seutil_dontaudit_read_file_contexts(gravity_installer_t)
userdom_user_home_content_filetrans(gravity_installer_t, gravity_home_t, file, "crashreport.tgz")
dbus_system_bus_client(gravity_domain)
init_dbus_chat(gravity_domain)
init_start_transient_unit(gravity_domain)
init_stop_transient_unit(gravity_domain)
# start/stop planet scope unit
systemd_start_systemd_services(gravity_domain)
fs_rw_tmpfs_files(gravity_domain)
fs_manage_cgroup_dirs(gravity_domain)
fs_manage_cgroup_files(gravity_domain)
allow gravity_installer_t gravity_home_t:service { manage_service_perms };
# create symlink for kubectl via ln
allow gravity_installer_t bin_t:lnk_file unlink;
dontaudit gravity_installer_t self:capability net_admin;
dontaudit gravity_domain gravity_container_runtime_t:process { noatsecure rlimitinh siginh };
allow gravity_domain self:netlink_kobject_uevent_socket { getattr create bind setopt };
# allow installer to reset/recreate agent service in /etc/systemd/system if
# there's a unit that had not been correctly labeled (as gravity_unit_file_t).
# The reason we're opening them for the whole gravity domain is that there are
# still places (like agent deployment) that might get tripped by existing service unit
# files without the expected label
allow gravity_domain systemd_unit_file_t:service { disable enable status stop };
allow gravity_domain systemd_unit_file_t:file { unlink rw_file_perms };
# do not audit the attempt to create /writeable
dontaudit gravity_installer_t root_t:dir { write };

# lsblk
fs_getattr_tmpfs(gravity_domain)
udev_read_pid_files(gravity_domain)

gravity_manage_executable_content(gravity_domain)
files_mounton_rootfs(gravity_domain)
files_unmount_rootfs(gravity_domain)
fs_relabelfrom_tmpfs(gravity_domain)
files_dontaudit_getattr_all_dirs(gravity_domain)
files_dontaudit_getattr_all_files(gravity_domain)
auth_dontaudit_getattr_shadow(gravity_domain)

allow gravity_domain container_share_t:dir mounton;
allow gravity_domain container_file_t:dir mounton;
allow gravity_domain container_file_t:filesystem { relabelto relabelfrom };
allow gravity_domain container_runtime_exec_t:file { setattr unlink };
optional_policy(`
  init_enable_transient_unit(gravity_domain)
  init_disable_transient_unit(gravity_domain)
  init_stop_transient_unit(gravity_domain)
')

########################################
#
# Planet local policy
#

##################
# init process
fs_manage_cgroup_dirs(gravity_container_init_t)
fs_manage_cgroup_files(gravity_container_init_t)
fs_mount_cgroup(gravity_container_init_t)
kernel_rw_fs_sysctls(gravity_container_init_t)
dev_read_kmsg(gravity_container_init_t)
dev_write_kmsg(gravity_container_init_t)
init_rw_stream_sockets(gravity_container_init_t)
allow gravity_container_init_t sysctl_fs_t:file write;
allow gravity_container_init_t gravity_container_home_t:dir { manage_dir_perms };
allow gravity_container_init_t gravity_container_home_t:file { setattr ioctl rename lock unlink };
allow gravity_container_init_t gravity_container_runtime_t:process { signal_perms };
allow gravity_container_init_t gravity_executable_domain:file entrypoint;

allow gravity_container_init_t self:system status;
allow gravity_container_init_t self:process { setfscreate setsockcreate };
allow gravity_container_init_t self:dbus send_msg;
optional_policy(`
  gen_require(`
    class dbus {acquire_svc};
  ')
  allow gravity_container_init_t self:dbus acquire_svc;
')

seutil_read_config(gravity_container_init_t)
# comm=systemd-sysuser name=file_contexts.subs_dist
seutil_read_file_contexts(gravity_container_init_t)
seutil_read_default_contexts(gravity_container_init_t)
selinux_compute_access_vector(gravity_container_init_t)
selinux_compute_create_context(gravity_container_init_t)
allow gravity_container_init_t container_runtime_t:unix_stream_socket { create setopt bind listen };
allow gravity_container_init_t gravity_container_runtime_t:dbus send_msg;

# shutdown container
# systemd start /lib/systemd/system/halt.target
allow gravity_container_init_t gravity_container_file_t:service { manage_service_perms };
allow gravity_container_systemctl_t gravity_container_init_t:system halt;

kernel_request_load_module(gravity_container_init_t)
# mknod /run/systemd/inaccessible/{fifo,sock}
allow gravity_container_init_t self:netlink_route_socket nlmsg_write;
allow gravity_container_init_t self:netlink_audit_socket nlmsg_relay;
allow gravity_container_init_t container_file_t:fifo_file { getattr open create read write };
allow gravity_container_init_t container_file_t:sock_file { setattr create write unlink };
allow gravity_container_init_t container_share_t:dir { write add_name };
allow gravity_container_init_t container_share_t:file write;

dev_mounton_sysfs(gravity_container_init_t)
fs_mount_tmpfs(gravity_container_init_t)
fs_mounton_tmpfs(gravity_container_init_t)
fs_remount_tmpfs(gravity_container_init_t)

# TODO: create a custom domain for 'planet agent'
# Use a symlink for the agent part if it works with a custom label?
gravity_container_runtime_domtrans(gravity_container_init_t)
container_runtime_domtrans(gravity_container_init_t)
domtrans_pattern(gravity_container_init_t, gravity_kubernetes_exec_t, gravity_kubernetes_t)
domtrans_pattern(gravity_container_init_t, gravity_service_exec_t, gravity_service_t)
domtrans_pattern(gravity_container_init_t, gravity_exec_t, gravity_t)
domtrans_pattern(gravity_container_init_t, gravity_container_systemctl_exec_t, gravity_container_systemctl_t)
domtrans_pattern(gravity_container_init_t, gravity_container_file_t, gravity_container_t)
domtrans_pattern(gravity_container_init_t, container_file_t, gravity_container_t)

ps_process_pattern(gravity_container_init_t, gravity_container_domain)
allow gravity_container_init_t gravity_container_domain:process { signal_perms };
allow gravity_container_init_t gravity_container_domain:process2 nnp_transition;
allow gravity_container_init_t container_domain:process { signal_perms };
allow gravity_container_init_t container_domain:dir { search_dir_perms };
allow gravity_container_init_t container_runtime_t:process { signal_perms };

allow gravity_container_init_t gravity_container_home_t:dir { manage_dir_perms };
allow gravity_container_init_t gravity_container_home_t:file { manage_file_perms };
allow gravity_container_init_t gravity_container_domain:unix_dgram_socket sendto;
allow gravity_container_init_t gravity_container_domain:unix_stream_socket { connectto read write };

allow gravity_container_init_t gravity_container_file_t:filesystem unmount;
gravity_container_manage_files(gravity_container_init_t)
fs_mount_rpc_pipefs(gravity_container_init_t)
fs_unmount_rpc_pipefs(gravity_container_init_t)
kernel_unmount_proc(gravity_container_init_t)
fs_unmount_tmpfs(gravity_container_init_t)

# dbus-daemon
allow gravity_container_init_t self:unix_stream_socket { getopt ioctl accept };
allow gravity_container_init_t self:unix_dgram_socket { getopt setopt };

kernel_manage_debugfs(gravity_container_init_t)
kernel_read_ring_buffer(gravity_container_init_t)
# comm=dbus-daemon path=/run/dbus/system_bus_socket
allow gravity_container_domain gravity_container_init_t:unix_stream_socket { accept getopt ioctl };
# start rpcbind.socket
allow gravity_container_init_t self:udp_socket listen;

# /bin/systemd-sysusers
# ================
# TODO: add explicit allow rules to avoid enabling type transitions for passwd_file_t, shadow_t etc.
# Enabling these will force gravity domain to manage (incl. removal) these as well which I'd like to avoid
auth_manage_passwd(gravity_container_init_t)
auth_manage_shadow(gravity_container_init_t)
auth_manage_login_records(gravity_container_init_t)
auth_manage_faillog(gravity_container_init_t)
auth_create_lastlog(gravity_container_init_t)
auth_rw_lastlog(gravity_container_init_t)
optional_policy(`
  gen_require(`
    type faillog_t;
    type lastlog_t;
    type wtmp_t;
    type etc_t;
  ')
  allow gravity_domain etc_t:lnk_file unlink;
  allow gravity_domain faillog_t:file unlink;
  allow gravity_domain lastlog_t:file unlink;
  allow gravity_domain wtmp_t:file unlink;
  allow gravity_container_t faillog_t:file { read_file_perms };
')
# ls/lsof/cat support for the above
auth_read_passwd(gravity_container_t)
auth_read_shadow(gravity_container_t)
auth_read_login_records(gravity_container_t)
auth_read_lastlog(gravity_container_t)
fs_getattr_xattr_fs(gravity_container_t)

# systemd-tmpfiles
# ================
auth_dontaudit_read_login_records(gravity_container_init_t)
auth_dontaudit_write_login_records(gravity_container_init_t)
# do not allow systemd inside the container to relabel
dontaudit gravity_container_init_t gravity_container_file_t:dir { relabel_dir_perms };
dontaudit gravity_container_init_t gravity_container_home_t:dir { relabel_dir_perms };
dontaudit gravity_container_init_t var_lib_t:dir { create read };
dontaudit gravity_container_init_t var_log_t:dir { create relabel_dir_perms };
dontaudit gravity_container_init_t var_t:dir { create relabel_dir_perms };
dontaudit gravity_container_init_t wtmp_t:file { relabel_file_perms };
dontaudit gravity_container_init_t faillog_t:file { relabel_file_perms };
dontaudit gravity_container_init_t lastlog_t:file { relabel_file_perms };
allow container_runtime_t gravity_container_init_t:dbus send_msg;
allow gravity_container_init_t container_runtime_t:dbus send_msg;
# /etc/mtab inside planet
allow gravity_container_init_t etc_t:lnk_file { create rename unlink };

# /usr/lib/systemd/system-generators/systemd-*
allow gravity_container_t self:process setfscreate;

# systemctl
allow gravity_container_init_t gravity_container_systemctl_t:dir search;
allow gravity_container_systemctl_t gravity_container_init_t:file { read_file_perms };
allow gravity_container_systemctl_t gravity_kubernetes_t:dir { search_dir_perms };
allow gravity_container_systemctl_t gravity_service_t:dir { search_dir_perms };
allow gravity_container_systemctl_t gravity_container_init_t:unix_stream_socket connectto;
gravity_container_read_files(gravity_container_systemctl_t)
allow gravity_container_systemctl_t gravity_container_init_t:system { status reload disable enable kill halt };
allow gravity_container_systemctl_t gravity_container_file_t:service { manage_service_perms };
allow gravity_container_systemctl_t gravity_container_domain:process { signal_perms };
allow gravity_container_systemctl_t gravity_container_init_t:dbus send_msg;
allow gravity_container_init_t gravity_container_systemctl_t:dbus send_msg;
allow gravity_container_init_t gravity_container_systemctl_t:unix_stream_socket { create setopt bind listen };
domtrans_pattern(gravity_container_t, gravity_container_systemctl_exec_t, gravity_container_systemctl_t)
domtrans_pattern(gravity_container_init_t, gravity_container_systemctl_exec_t, gravity_container_systemctl_t)
domtrans_pattern(gravity_container_systemctl_t, gravity_container_init_exec_t, gravity_container_init_t)

# journalctl
allow gravity_container_systemctl_t gravity_container_home_t:dir { rw_dir_perms rmdir };
allow gravity_container_systemctl_t gravity_container_home_t:file { manage_file_perms };
allow gravity_container_systemctl_t gravity_container_init_t:unix_stream_socket connectto;
allow gravity_container_systemctl_t gravity_container_file_t:service { manage_service_perms };

# ======================
# end-of-init process

gravity_domtrans(gravity_container_runtime_t)
corenet_tcp_connect_http_port(gravity_container_runtime_t)
corenet_tcp_bind_generic_node(gravity_container_runtime_t)
corenet_udp_bind_generic_node(gravity_container_runtime_t)
selinux_compute_create_context(gravity_container_runtime_t)
auth_manage_passwd(gravity_container_runtime_t)
auth_read_shadow(gravity_container_runtime_t)
admin_pattern(gravity_container_runtime_t, gravity_container_var_run_t)
admin_pattern(gravity_container_runtime_t, gravity_container_home_t)
admin_pattern(gravity_container_runtime_t, gravity_container_file_t)
manage_chr_files_pattern(gravity_container_runtime_t, gravity_container_file_t, gravity_container_file_t)
manage_blk_files_pattern(gravity_container_runtime_t, gravity_container_file_t, gravity_container_file_t)
files_root_filetrans(gravity_container_runtime_t, gravity_container_file_t, dir_file_class_set)
init_status(gravity_container_runtime_t)
init_stop_transient_unit(gravity_container_runtime_t)
dbus_system_bus_client(gravity_container_runtime_t)
filetrans_pattern(gravity_container_runtime_t, gravity_container_file_t, gravity_service_exec_t, lnk_file, "etcdctl-cmd")
files_pid_filetrans(gravity_container_runtime_t, container_var_run_t, dir, "planet")
files_pid_filetrans(gravity_container_runtime_t, container_var_run_t, sock_file, "planet.socket")
# udev monitor
udev_create_kobject_uevent_socket(gravity_container_runtime_t)
# start/stop planet scope units
systemd_config_generic_services(gravity_container_runtime_t)
dontaudit gravity_container_runtime_t gravity_container_init_t:process { noatsecure rlimitinh siginh };
# planet re-writing /etc/passwd while it is labeled as gravity_home_t during startup
dontaudit gravity_container_runtime_t gravity_home_t:file write;
allow gravity_container_runtime_t gravity_service_exec_t:lnk_file manage_lnk_file_perms;
allow gravity_container_runtime_t gravity_container_init_t:unix_stream_socket { read write };
allow gravity_container_runtime_t gravity_home_t:file getattr;
allow gravity_container_runtime_t gravity_unit_file_t:file { rw_file_perms };
allow gravity_container_runtime_t gravity_unit_file_t:service { manage_service_perms };
allow gravity_container_runtime_t gravity_port_type:tcp_socket { connect name_connect };
allow gravity_container_runtime_t gravity_port_type:udp_socket { connect };
allow gravity_container_runtime_t gravity_container_file_t:chr_file mmap_file_perms;
allow gravity_container_runtime_t gravity_container_file_t:filesystem { relabelto relabelfrom mount };
allow gravity_container_runtime_t gravity_container_init_t:key { view setattr };
allow gravity_container_runtime_t gravity_container_file_t:key create;
allow gravity_container_runtime_t gravity_domain:key create;
allow gravity_container_runtime_t gravity_container_domain:key create;
allow gravity_container_runtime_t gravity_container_domain:unix_dgram_socket sendto;
allow gravity_container_runtime_t gravity_container_init_t:unix_dgram_socket sendto;
allow gravity_container_runtime_t gravity_container_init_t:unix_stream_socket { ioctl connectto };
allow gravity_container_runtime_t container_runtime_t:unix_stream_socket connectto;
# planet can waitid on all started processes
allow domain gravity_container_runtime_t:process sigchld;
# planet agent
allow gravity_container_runtime_t gravity_home_t:file { open read };
allow gravity_container_runtime_t gravity_home_t:dir { mounton getattr search };
allow gravity_container_runtime_t gravity_home_t:file mounton;
allow gravity_container_runtime_t gravity_container_home_t:dir mounton;
allow gravity_container_runtime_t gravity_container_home_t:file { mounton entrypoint execute };
allow gravity_container_runtime_t gravity_home_t:lnk_file read;
allow gravity_container_runtime_t gravity_var_run_t:sock_file unlink;
allow gravity_container_runtime_t self:capability chown;
neverallow gravity_container_runtime_t self:capability dac_override;
allow gravity_container_runtime_t self:process getattr;
allow gravity_container_runtime_t self:tcp_socket { connect create setopt getopt getattr };
# TODO: label kubernetes services with a custom type
# init_t -> /lib/systemd/system/kube-controller-manager.service
allow gravity_container_runtime_t gravity_container_file_t:service { start status };
allow gravity_container_runtime_t gravity_container_init_t:dbus send_msg;
allow gravity_container_runtime_t gravity_container_init_t:system status;

##################
# gravity services
#
allow gravity_service_t gravity_container_home_t:dir { getattr search open read write add_name remove_name create rename rmdir };
allow gravity_service_t gravity_container_home_t:file { getattr create open read append write unlink rename lock };
allow gravity_service_t gravity_home_t:file { getattr read open };
allow gravity_service_t gravity_home_t:dir { getattr search };
allow gravity_service_t container_file_t:sock_file write;
allow gravity_service_t gravity_container_init_t:unix_dgram_socket sendto;
allow gravity_service_t gravity_container_file_t:dir read;
allow gravity_service_t gravity_container_file_t:chr_file { read write ioctl lock open };
allow gravity_service_t gravity_container_file_t:sock_file write;
# etcd
search_dirs_pattern(gravity_service_t, gravity_container_file_t, gravity_container_file_t)
rw_files_pattern(gravity_service_t, gravity_container_file_t, gravity_container_file_t)
rw_lnk_files_pattern(gravity_service_t, gravity_container_file_t, gravity_container_file_t)
kernel_request_load_module(gravity_service_t)
allow gravity_service_t gravity_service_exec_t:lnk_file { read_lnk_file_perms };

allow gravity_service_t gravity_container_init_t:unix_stream_socket ioctl;
allow gravity_service_t gravity_container_init_t:unix_stream_socket { read write };

##################
# generic container processes
#
virt_sandbox_net_domain(gravity_container_t)
logging_send_syslog_msg(gravity_container_t)
dev_mounton_sysfs(gravity_container_domain)
fs_mounton_cgroup(gravity_container_domain)
fs_unmount_cgroup(gravity_container_domain)
sysnet_dns_name_resolve(gravity_container_domain)
# /bin/mount mqueue /dev/mqueue -t mqueue
fs_mount_tmpfs(gravity_container_domain)
corenet_unconfined(gravity_container_t)
virt_default_capabilities(gravity_container_t)
kernel_read_messages(gravity_container_t)
# allow dmesg inside the container
kernel_read_ring_buffer(gravity_container_t)
# /bin/mount sunrpc /run/rpc_pipefs -t rpc_pipefs
kernel_request_load_module(gravity_container_t)
# execute gravity inside the container in its domain
can_exec(gravity_container_t, gravity_exec_t)
gravity_domtrans(gravity_container_t)
gravity_read_state_files(gravity_container_domain)

manage_dirs_pattern(gravity_container_domain,  gravity_container_file_t, gravity_container_file_t)
manage_files_pattern(gravity_container_domain, gravity_container_file_t, gravity_container_file_t)
manage_lnk_files_pattern(gravity_container_domain, gravity_container_file_t, gravity_container_file_t)
manage_sock_files_pattern(gravity_container_domain, gravity_container_file_t, gravity_container_file_t)
manage_fifo_files_pattern(gravity_container_domain, gravity_container_file_t, gravity_container_file_t)
can_exec(gravity_container_domain, gravity_container_file_t)
allow gravity_container_domain gravity_container_file_t:blk_file setattr;
rw_blk_files_pattern(gravity_container_domain, gravity_container_file_t, gravity_container_file_t)
allow gravity_container_domain gravity_container_file_t:dir mounton;
allow gravity_container_domain gravity_container_file_t:filesystem { mount_fs_perms };

gravity_container_read_state_files(container_domain)
gravity_search_state(container_domain)

allow gravity_container_domain gravity_container_init_t:unix_stream_socket { accept ioctl };
allow gravity_container_domain gravity_home_t:file { read_file_perms };
allow gravity_container_domain gravity_container_file_t:chr_file { lock read write getattr ioctl open };
# sys-kernel-config.mount, sys-kernel-debug.mount
fs_mount_rpc_pipefs(gravity_container_domain)
fs_unmount_rpc_pipefs(gravity_container_domain)
optional_policy(`
  gen_require(`
    type configfs_t;
  ')
  allow gravity_container_t configfs_t:filesystem mount;
')
kernel_mount_debugfs(gravity_container_domain)
kernel_unmount_debugfs(gravity_container_domain)
fs_unmount_configfs(gravity_container_domain)
kernel_mount_proc(gravity_container_domain)
kernel_unmount_proc(gravity_container_domain)
fs_mount_tmpfs(gravity_container_domain)
fs_unmount_tmpfs(gravity_container_domain)

# docker info
allow gravity_container_t container_runtime_t:unix_stream_socket connectto;

# ps, top
# allow ps to introspect init
domain_read_all_domains_state(gravity_container_domain)
allow gravity_container_domain domain:process getattr;
# grep, find
allow gravity_container_domain gravity_container_home_t:lnk_file read;
allow gravity_container_domain container_log_t:file { getattr open read };
container_runtime_read_tmpfs_files(gravity_container_domain)
# strace
allow gravity_container_t gravity_container_domain:process { ptrace signal_perms };
allow gravity_container_t gravity_container_domain:dir { list_dir_perms };
allow gravity_container_domain gravity_container_t:process sigchld;
dontaudit gravity_container_t gravity_container_init_t:netlink_audit_socket getattr;


##################
# Kubernetes components
#
dev_read_kmsg(gravity_kubernetes_t)
kernel_request_load_module(gravity_kubernetes_t)
# service unit files are labeled as gravity_unit_file_t inside planet as well
manage_files_pattern(gravity_kubernetes_t, gravity_unit_file_t, gravity_unit_file_t)
manage_lnk_files_pattern(gravity_kubernetes_t, gravity_unit_file_t, gravity_unit_file_t)
allow gravity_kubernetes_t gravity_unit_file_t:service { manage_service_perms };
allow gravity_kubernetes_t gravity_container_init_t:dbus send_msg;
# gravity_container_read_home(gravity_kubernetes_t)
allow gravity_kubernetes_t gravity_container_home_t:dir { getattr search open read remove_name write };

# kubelet
#==================================
container_manage_files(gravity_kubernetes_t)
admin_pattern(gravity_kubernetes_t, gravity_kubelet_home_t)
gravity_kubelet_home_content_filetrans(gravity_kubernetes_t, container_file_t, dir, "plugins")
gravity_kubelet_home_content_filetrans(gravity_kubernetes_t, container_file_t, dir, "plugins_registry")
gravity_kubelet_home_content_filetrans(gravity_kubernetes_t, container_file_t, dir, "device-plugins")
allow gravity_kubernetes_t gravity_kubelet_home_t:dir mounton;
# relabel <root-dir>/{device-plugins,plugins,plugin_registry}
allow gravity_kubernetes_t container_file_t:dir relabelto;
# create /var/lib/kubelet/.*
allow gravity_kubernetes_t gravity_service_t:dir { search_dir_perms };
# append: kube-apiserver, audit.log
allow gravity_kubernetes_t gravity_container_home_t:file { getattr read open create append };
allow gravity_kubernetes_t gravity_container_init_t:dir { search_dir_perms };
allow gravity_kubernetes_t gravity_container_init_t:lnk_file { manage_lnk_file_perms };
ps_process_pattern(gravity_kubernetes_t, gravity_container_runtime_t)
ps_process_pattern(gravity_kubernetes_t, gravity_container_file_t)
allow gravity_kubernetes_t container_file_t:dir mounton;
# systemd-run --description=Kubernetes systemd probe --scope true
allow gravity_kubernetes_t gravity_container_init_t:file { read_file_perms };
allow gravity_kubernetes_t gravity_container_init_t:unix_stream_socket connectto;
allow gravity_kubernetes_t gravity_container_file_t:dir { write add_name };
# read certificates
allow gravity_kubernetes_t gravity_home_t:dir { search_dir_perms };
allow gravity_kubernetes_t gravity_home_t:file { read_file_perms };
allow gravity_kubernetes_t container_runtime_t:unix_stream_socket connectto;
allow gravity_kubernetes_t gravity_service_t:file { read_file_perms };
allow gravity_kubernetes_t gravity_home_t:dir write;
allow gravity_kubernetes_t container_runtime_t:process sigkill;
allow gravity_kubernetes_t gravity_container_domain:process sigkill;
kernel_read_ring_buffer(gravity_kubernetes_t)
container_runtime_read_tmpfs_files(gravity_kubernetes_t)
# kube-apiserver: /var/log/apiserver/audit.log
allow gravity_kubernetes_t gravity_container_home_t:file write;
# kubelet: /proc/<id>
domain_read_all_domains_state(gravity_kubernetes_t)
# kubelet: write /proc/214/oom_score_adj
allow gravity_kubernetes_t container_runtime_t:file write;
# kubelet: write /proc/sys/vm/overcommit_memory
kernel_rw_vm_overcommit_sysctls(gravity_kubernetes_t)
fs_manage_cgroup_dirs(gravity_kubernetes_t)
fs_manage_cgroup_files(gravity_kubernetes_t)
# /usr/bin/mount -t tmpfs tmpfs /var/lib/kubelet/pods/5b1d644c-3b6c-4c6a-9bde-97fa6dc87520/volumes/kubernetes.io~secret/default-to
fs_mount_tmpfs(gravity_kubernetes_t)
fs_unmount_tmpfs(gravity_kubernetes_t)
allow gravity_kubernetes_t gravity_container_home_t:dir { add_name create };
# kubelet: write resolv.conf
allow gravity_kubernetes_t container_share_t:file write;
allow gravity_kubernetes_t container_var_lib_t:file { getattr read open write };
allow gravity_kubernetes_t container_log_t:file { getattr read open };
allow gravity_kubernetes_t gravity_container_home_t:dir rmdir;
allow gravity_kubernetes_t container_runtime_tmpfs_t:dir getattr;
allow gravity_kubernetes_t gravity_container_home_t:lnk_file { getattr create read unlink };
allow gravity_kubernetes_t gravity_home_t:dir getattr;
can_exec(gravity_kubernetes_t, gravity_container_file_t)
# kubelet: execute /usr/bin/systemd-run
can_exec(gravity_kubernetes_t, gravity_container_init_exec_t)
dontaudit gravity_kubernetes_t gravity_container_logger_home_t:dir getattr;
# kubelet, /run/systemd/scopeXXX unit files
allow gravity_kubernetes_t gravity_container_file_t:service { start stop status };
allow gravity_kubernetes_t gravity_container_init_t:unix_stream_socket ioctl;
allow gravity_kubernetes_t container_file_t:dir { list_dir_perms };
allow gravity_kubernetes_t container_file_t:file { rw_file_perms };
allow gravity_kubernetes_t container_domain:process { signal_perms };

# kube-proxy (/var/state/root.cert)
allow gravity_kubernetes_t gravity_home_t:dir { read create write add_name };
allow gravity_kubernetes_t gravity_container_init_t:unix_stream_socket { read write };
# modprobe -- ip_vs_sh
allow gravity_kubernetes_t self:capability sys_module;

# lsof
allow gravity_container_domain container_runtime_t:tcp_socket getattr;
allow gravity_container_domain container_runtime_t:unix_dgram_socket getattr;
allow gravity_container_domain container_runtime_t:unix_stream_socket getattr;
allow gravity_container_domain gravity_container_init_t:lnk_file getattr;
allow gravity_container_domain gravity_container_init_t:unix_dgram_socket getattr;
allow gravity_container_domain gravity_container_init_t:unix_stream_socket getattr;
allow gravity_container_domain gravity_container_runtime_t:tcp_socket getattr;
allow gravity_container_domain gravity_container_runtime_t:unix_dgram_socket getattr;
allow gravity_container_domain gravity_container_runtime_t:unix_stream_socket getattr;
dev_read_kmsg(gravity_container_domain)
# usr/lib/systemd/system-generators/systemd-system-update-generator /run/systemd/generator /run/systemd/generator.early /run/systemd
dev_write_kmsg(gravity_container_domain)

# etcdctl-cmd: /run/systemd/journal/socket
allow gravity_container_domain gravity_container_init_t:unix_dgram_socket sendto;

# allow container runtime to waitid on container processes
allow container_domain container_runtime_domain:process sigchld;
allow container_domain gravity_container_domain:process sigchld;

allow gravity_container_domain gravity_container_init_t:unix_dgram_socket { read write };
allow gravity_container_domain gravity_container_init_t:unix_stream_socket { read write };

#######################
# gravity uninstall
#
userdom_dontaudit_manage_admin_dir(gravity_domain)
allow gravity_domain container_file_t:sock_file { getattr unlink };
allow gravity_domain container_log_t:file unlink;
allow gravity_domain container_share_t:blk_file { getattr unlink };
allow gravity_domain container_share_t:chr_file { getattr unlink };
# rm -r /usr/local/share/gravity
dontaudit gravity_domain usr_t:dir { write rmdir };
dontaudit gravity_domain usr_t:file { unlink };
# /var/log/private
allow gravity_domain var_log_t:dir { rmdir };

#######################
# gravity report
#
# read process state (including attributes)
domain_read_all_domains_state(gravity_domain)
ps_process_pattern(gravity_domain, domain)
seutil_read_default_contexts(gravity_domain)
# df -i
allow gravity_domain configfs_t:dir { list_dir_perms };
# store bits from /etc
allow gravity_domain selinux_config_t:dir { list_dir_perms };
# system export-runtime-journal: mount /var/lib/gravity/local/packages/unpacked/gravitational.io/planet/<version>/rootfs/tmp/journal
allow gravity_domain gravity_container_file_t:dir mounton;
# bash trying to load the .bashrc from the user's home (root in this case)
# when running commands wrapped as a script
dontaudit gravity_t admin_home_t:file read;
